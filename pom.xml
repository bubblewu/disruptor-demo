<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bubble</groupId>
    <artifactId>disruptor-demo</artifactId>
    <version>1.0-SNAPSHOT</version>

    <name>disruptor-demo</name>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <junit.version>4.12</junit.version>
        <mockito.version>2.19.1</mockito.version>
        <slf4j.version>1.7.25</slf4j.version>
        <lo4j2.version>2.17.1</lo4j2.version>
        <disruptor.version>3.4.2</disruptor.version>
    </properties>

    <dependencies>
        <!-- Test Config Start -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Test Config End -->

        <!-- slf4j config start -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
            <scope>runtime</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--log4j2 config -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${lo4j2.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${lo4j2.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${lo4j2.version}</version>
            <scope>runtime</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- log config end -->

        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>${disruptor.version}</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!--使用maven-jar-plugin插件打包-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <!--主类-->
                            <!--<mainClass>com.bubble.xx</mainClass>-->
                            <!--依赖目录，与assembly.xml中配置一致，否则无法找到依赖包-->
                            <classpathPrefix>lib/</classpathPrefix>
                            <addClasspath>true</addClasspath>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!--使用assembly.xml配置打包，可打zip、tar.gz等格式-->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>

                    <descriptors> <!--描述文件路径-->
                        <descriptor>src/main/resources/assembly.xml</descriptor>
                    </descriptors>
                    <outputDirectory>${project.build.directory}/</outputDirectory> <!-- 打包后输出的路径 -->
                    <attach>false</attach> <!--这样配置后，mvn deploy不会把assembly打的zip包上传到nexus-->
                    <appendAssemblyId>false</appendAssemblyId> <!--appendAssemblyId属性控制是否在生成的打包文件的文件名中包含assembly id-->
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id> <!--名字任意 -->
                        <phase>package</phase> <!-- 绑定到package生命周期阶段上 -->
                        <goals>
                            <goal>single</goal> <!-- 只运行一次 -->
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
